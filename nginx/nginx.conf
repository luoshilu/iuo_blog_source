
#user  nobody;
# worker_processes  1;

#error_log  logs/error.log;
events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 50M;
    limit_req_zone $binary_remote_addr zone=allips:10m rate=30r/s;
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 9;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 40;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript font/opentype image/jpeg image/png image/svg+xml image/x-icon;

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    # server {
    #     listen       80;
    #     server_name  asyncc.com;
    #     limit_req zone=allips burst=5 nodelay;

    #     # https verify
    #     location ^~ ^/.well-known {
    #         # ./certbot-auto certonly --webroot -w /usr/local/webserver/nginx-1.12.2/html -d asyncc.com
    #         # asyncc.com/.well-known\acme-challenge\KH8GQoz6q3tkQJeKW4LiTX6Rd6mzDbA0AwR-AxHuvSA
    #         break;
    #     }
    #     location ~ / {
    #       rewrite ^(.*)$ https://${server_name}$1 permanent;
    #     }
    # }

    upstream serve_host {
        server serve_ghost:8765;
    }
    upstream ssr_host {
        server ssr_ghost:3000;
    }

    # HTTPS server
    #
    server {
        listen     80;
        # listen 443 ssl http2;
        # server_name asyncc.com;

        # ssl_certificate /etc/letsencrypt/live/asyncc.com/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/asyncc.com/privkey.pem;
        # ssl_trusted_certificate /etc/letsencrypt/live/asyncc.com/chain.pem;

        # ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
        set $ssr_port 3000;
        set $serve_port 8765;
        #location ~ ^/(resume|dist|img|font) {
        #    root /usr/local/webserver/resume;
        #    #if (!-f $request_filename){
        #    #    break;
        #    #    proxy_pass $host;
        #    #}
        #}

        # 前台资源
        rewrite ^/_nuxt/(.+?)$ /.nuxt/dist/client/$1 last;

        location ~ ^/(.nuxt)/ {
            etag         on;
            expires      10d;
            root /usr/share/nginx/html/client_ssr;
        }
        # 服务端资源
        location ~ /(static/|uploads/) {
            root /usr/share/nginx/html/serve;
        }
        # 后台资源
        location ~ /(admin/|admin.html) {
            root /usr/share/nginx/html/admin;
        }

        location ~ ^/(static|uploads|admin)/ {
            etag         on;
            expires      10d;
        }

        error_page 403 /403.png;
        location = /403.png {}

        location ~ ^/(admin_api/|client_api/) {
            proxy_http_version 1.1;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_pass http://serve_host$request_uri;
            proxy_redirect off;
        }

        location ~ / {
            proxy_redirect                      off;
            proxy_set_header Host               $http_host;
            proxy_set_header X-Real-IP          $remote_addr;
            proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto  $scheme;
            proxy_read_timeout          1m;
            proxy_connect_timeout       1m;
            proxy_pass                          http://ssr_host;
        }

        error_page 400 401 402 404 405 /error_404.html;
        error_page 500 502 503 504 /error_500.html;
        location = /error_404.html {}
        location = /error_500.html {}
    }

}
